---
import TFTBoardCharacter from "./TFTBoardCharacter.astro";
import ItemWithImage from "./ItemWithImage.astro";

interface ChampionData {
  name: string;
  position: { row: number; col: number };
  items?: string[];
  stars?: number;
}

interface BoardData {
  champions: ChampionData[];
}

interface Props {
  boardData: BoardData;
}

const { boardData } = Astro.props;

// FunciÃ³n para determinar el color del borde basado en las estrellas
const getBorderColor = (stars: number = 1): "purple" | "blue" | "yellow" | "green" | "gray" => {
  switch (stars) {
    case 3: return "yellow";
    case 2: return "purple";
    case 1: return "blue";
    default: return "gray";
  }
};

// Convertir los datos de Markdown al formato esperado por el componente
const champions = boardData.champions.map(champ => ({
  champion: champ.name,
  borderColor: getBorderColor(champ.stars),
  items: champ.items || [],
  position: champ.position,
  stars: champ.stars
}));

// Crear grid 4x7 para el board TFT
const createBoard = () => {
  const board = Array(4).fill(null).map(() => Array(7).fill(null));

  champions.forEach(champion => {
    if (champion.position.row < 4 && champion.position.col < 7) {
      board[champion.position.row][champion.position.col] = champion;
    }
  });

  return board;
};

const board = createBoard();
---

<div class="bg-slate-200/50 dark:bg-slate-800/20 rounded-xl p-4 border border-slate-200 dark:border-slate-800 responsive-tft-board">
  <div class="board-container">
    <div class="board-grid">
      {board.map((row, rowIndex) => (
        <div class={`board-row ${rowIndex % 2 === 1 ? 'offset' : ''}`}>
          {row.map((cell, colIndex) => (
            <div class="board-cell" data-row={rowIndex} data-col={colIndex}>
              {cell ? (
                <TFTBoardCharacter
                  champion={cell.champion as any}
                  borderColor={cell.borderColor}
                  items={cell.items as any}
                  size="var(--hex-size)"
                  stars={cell.stars}
                />
              ) : (
                <TFTBoardCharacter
                  borderColor="gray"
                  size="var(--hex-size)"
                />
              )}
            </div>
          ))}
        </div>
      ))}
    </div>
  </div>


</div>

<style>
  :root {
    --hex-size: 80px;
    --board-gap: 16px;
    --board-offset: 44px;
  }

  .responsive-tft-board {
    width: 100%;
    max-width: 900px;
    margin: 0 auto;
  }

  .board-container {
    display: flex;
    justify-content: center;
    margin-top: 25px;
    margin-bottom: 2rem;
  }

  .board-grid {
    margin-left: -32px;
    display: flex;
    flex-direction: column;
    align-items: center;
    min-width: fit-content;
  }

  .board-row {
    display: flex;
    gap: var(--board-gap);
    justify-content: center;
    align-items: center;
  }

  .board-row.offset {
    transform: translateX(var(--board-offset));
  }

  .board-cell {
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    width: var(--hex-size);
    height: var(--hex-size);
  }



  /* Responsive breakpoints */
  @media (max-width: 1024px) {
    :root {
      --hex-size: 72px;
      --board-gap: 7px;
      --board-offset: 39px;
    }

    .responsive-tft-board {
      padding: 1.25rem;
    }
  }

  @media (max-width: 768px) {
    :root {
      --hex-size: 64px;
      --board-gap: 6px;
      --board-offset: 35px;
    }

    .responsive-tft-board {
      padding: 1rem;
    }


  }

  @media (max-width: 640px) {
    :root {
      --hex-size: 56px;
      --board-gap: 5px;
      --board-offset: 30px;
    }

    .responsive-tft-board {
      padding: 0.75rem;
    }

    .board-container {
      margin-bottom: 1.5rem;
      padding: 0.5rem 0;
    }
  }

  @media (max-width: 480px) {
    :root {
      --hex-size: 48px;
      --board-gap: 4px;
      --board-offset: 26px;
    }

    .responsive-tft-board {
      padding: 0.5rem;
    }


  }

  @media (max-width: 360px) {
    :root {
      --hex-size: 42px;
      --board-gap: 3px;
      --board-offset: 23px;
    }

    .board-container {
      overflow-x: auto;
      -webkit-overflow-scrolling: touch;
    }

    .board-grid {
      min-width: 320px;
    }
  }

  /* Smooth transitions for responsive changes */
  .board-grid,
  .board-row,
  .board-cell {
    transition: all 0.3s ease;
  }

  /* Ensure board is always centered and scrollable on very small screens */
  @media (max-width: 320px) {
    .board-container {
      justify-content: flex-start;
      padding-left: calc(50vw - 160px);
    }
  }
</style>