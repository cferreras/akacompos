---
import TFTBoardCharacter from "./TFTBoardCharacter.astro";

interface Champion {
  champion: string;
  borderColor: "purple" | "blue" | "yellow" | "green" | "gray";
  items: string[];
  position: { row: number; col: number };
}

interface Props {
  champions?: Champion[];
  title?: string;
  description?: string;
}

const {
  champions = [
    {
      champion: "Neeko",
      borderColor: "yellow" as const,
      items: ["Steadfast Hammer", "Crownguard", "Warmog's Armor"],
      position: { row: 0, col: 4 }
    },
    {
      champion: "KSante",
      borderColor: "purple" as const,
      items: ["Sunfire Cape", "Evenshroud"],
      position: { row: 1, col: 3 }
    },
    {
      champion: "Rakan",
      borderColor: "green" as const,
      items: ["Archangel's Staff", "Gargoyle Stoneplate", "Titan's Resolve"],
      position: { row: 2, col: 1 }
    },
    {
      champion: "Jinx",
      borderColor: "purple" as const,
      items: [],
      position: { row: 3, col: 5 }
    },
    {
      champion: "Janna",
      borderColor: "yellow" as const,
      items: ["Red Buff", "Archangel's Staff"],
      position: { row: 3, col: 2 }
    },
    {
      champion: "Xayah",
      borderColor: "yellow" as const,
      items: ["Guinsoo's Rageblade", "Kraken's Fury", "Giant Slayer"],
      position: { row: 3, col: 6 }
    }
  ],
  title = "Protector Xayah",
  description = "Reroll composition focused on 3-star Xayah and Rakan"
} = Astro.props;

// Crear grid 4x7 para el board TFT
const createBoard = () => {
  const board = Array(4).fill(null).map(() => Array(7).fill(null));

  champions.forEach(champion => {
    if (champion.position.row < 4 && champion.position.col < 7) {
      board[champion.position.row][champion.position.col] = champion;
    }
  });

  return board;
};

const board = createBoard();
---

<div class="responsive-tft-board">

  <div class="board-container">
    <div class="board-grid">
      {board.map((row, rowIndex) => (
        <div class={`board-row ${rowIndex % 2 === 1 ? 'offset' : ''}`}>
          {row.map((cell, colIndex) => (
            <div class="board-cell" data-row={rowIndex} data-col={colIndex}>
              {cell ? (
                <TFTBoardCharacter
                  champion={cell.champion as any}
                  borderColor={cell.borderColor}
                  items={cell.items as any}
                  size="var(--hex-size)"
                />
              ) : (
                <TFTBoardCharacter
                  borderColor="gray"
                  size="var(--hex-size)"
                />
              )}
            </div>
          ))}
        </div>
      ))}
    </div>
  </div>

</div>

<style>
  :root {
    --hex-size: 80px;
    --board-gap: 16px;
    --board-offset: 44px;
  }

  .responsive-tft-board {
    width: 100%;
    max-width: 900px;
    margin: 0 auto;
    padding: 1.5rem;
  }


  .board-container {
    display: flex;
    justify-content: center;
    margin-top: 25px;
    margin-bottom: 2rem;

  }

  .board-grid {
    margin-left: -32px;
    display: flex;
    flex-direction: column;
    align-items: center;
    min-width: fit-content;
  }

  .board-row {
    display: flex;
    gap: var(--board-gap);
    justify-content: center;
    align-items: center;
  }

  .board-row.offset {
    transform: translateX(var(--board-offset));
  }

  .board-cell {
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    width: var(--hex-size);
    height: var(--hex-size);
  }

  .champions-summary {
    margin-top: 2rem;
    padding-top: 2rem;
    border-top: 1px solid rgba(139, 92, 246, 0.2);
  }

  .champion-icon {
    flex-shrink: 0;
  }

  .champion-info {
    flex: 1;
    min-width: 0;
  }

  .champion-name {
    display: block;
    font-size: 1.1rem;
    font-weight: 600;
    color: #e2e8f0;
    margin-bottom: 0.25rem;
  }

  .champion-items {
    display: flex;
    flex-wrap: wrap;
    gap: 0.25rem;
  }

  .item-name {
    font-size: 0.75rem;
    color: #94a3b8;
    background: rgba(139, 92, 246, 0.2);
    padding: 0.125rem 0.5rem;
    border-radius: 4px;
    white-space: nowrap;
  }

  /* Responsive breakpoints */
  @media (max-width: 1024px) {
    :root {
      --hex-size: 72px;
      --board-gap: 7px;
      --board-offset: 39px;
    }

    .responsive-tft-board {
      padding: 1.25rem;
    }

    .board-title {
      font-size: 1.75rem;
    }
  }

  @media (max-width: 768px) {
    :root {
      --hex-size: 64px;
      --board-gap: 6px;
      --board-offset: 35px;
    }

    .responsive-tft-board {
      padding: 1rem;
    }

    .board-title {
      font-size: 1.5rem;
    }

    .board-description {
      font-size: 0.9rem;
    }

    .champions-list {
      grid-template-columns: 1fr;
    }

    .champion-summary {
      padding: 0.75rem;
    }
  }

  @media (max-width: 640px) {
    :root {
      --hex-size: 56px;
      --board-gap: 5px;
      --board-offset: 30px;
    }

    .responsive-tft-board {
      padding: 0.75rem;
    }

    .board-header {
      margin-bottom: 1.5rem;
    }

    .board-title {
      font-size: 1.25rem;
    }

    .board-container {
      margin-bottom: 1.5rem;
      padding: 0.5rem 0;
    }

    .champions-summary {
      margin-top: 1.5rem;
      padding-top: 1.5rem;
    }

    .summary-title {
      font-size: 1.25rem;
    }
  }

  @media (max-width: 480px) {
    :root {
      --hex-size: 48px;
      --board-gap: 4px;
      --board-offset: 26px;
    }

    .responsive-tft-board {
      padding: 0.5rem;
    }

    .board-title {
      font-size: 1.125rem;
    }

    .board-description {
      font-size: 0.8rem;
    }

    .champion-summary {
      flex-direction: column;
      text-align: center;
      padding: 0.5rem;
    }

    .champion-info {
      width: 100%;
    }

    .champion-items {
      justify-content: center;
    }
  }

  @media (max-width: 360px) {
    :root {
      --hex-size: 42px;
      --board-gap: 3px;
      --board-offset: 23px;
    }

    .board-container {
      overflow-x: auto;
      -webkit-overflow-scrolling: touch;
    }

    .board-grid {
      min-width: 320px;
    }
  }

  /* Smooth transitions for responsive changes */
  .board-grid,
  .board-row,
  .board-cell {
    transition: all 0.3s ease;
  }

  /* Ensure board is always centered and scrollable on very small screens */
  @media (max-width: 320px) {
    .board-container {
      justify-content: flex-start;
      padding-left: calc(50vw - 160px);
    }
  }
</style>