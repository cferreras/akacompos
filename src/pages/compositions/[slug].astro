---
import Layout from "../../layouts/Layout.astro";
import TFTBoardFromData from "../../components/TFTBoardFromData.astro";
import { getCollection, render, type CollectionEntry } from "astro:content";
import ItemWithImage from "../../components/ItemWithImage.astro";

export async function getStaticPaths() {
  const compositions = await getCollection("compositions");

  return compositions.map((composition: CollectionEntry<"compositions">) => ({
    params: { slug: composition.id },
    props: { composition },
  }));
}

const { composition }: { composition: CollectionEntry<"compositions"> } =
  Astro.props;
const { slug } = Astro.params;

// Render the markdown content
const { Content } = await render(composition);
---

<Layout title={`${composition.data.tier} - ${composition.data.title}`}>
  <main class="flex-grow container mx-auto px-2 sm:px-4 lg:px-6 py-6 md:py-8">
    <div class="max-w-6xl mx-auto">
      <div class="mb-6">
        <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-3">
          <div>
            <h1 class="text-3xl md:text-4xl font-bold text-slate-900 dark:text-white">
              <span class="text-primary">{composition.data.tier}</span> - {composition.data.title}
            </h1>
            <p class="text-sm text-slate-500 dark:text-slate-400 mt-2">
              Updated {composition.data.updatedAt} by 
              <a class="font-medium text-primary hover:underline" href="#">{composition.data.author}</a>
            </p>
          </div>
          <button class="flex items-center justify-center gap-2 px-4 py-2 rounded-lg bg-primary text-white text-sm font-bold shadow-lg shadow-primary/30 hover:bg-primary/90 transition-all">
            <span class="material-symbols-outlined">content_copy</span>
            Copy Link
          </button>
        </div>
        <div class="mt-4 flex flex-wrap gap-2">
          {composition.data.tags.map((tag: string) => (
            <span class="px-3 py-1 text-xs font-semibold rounded-full bg-primary/10 text-primary">
              {tag}
            </span>
          ))}
        </div>
      </div>

      <div class="grid grid-cols-1 lg:grid-cols-3 gap-4 lg:gap-6">
        <div class="lg:col-span-2">
          <h2 class="text-2xl font-bold text-slate-900 dark:text-white mb-4">Composition Board</h2>
          <div class="relative  bg-slate-200/50 dark:bg-slate-800/20 rounded-xl p-4 border border-slate-200 dark:border-slate-800">
            <TFTBoardFromData boardSize="large" boardData={composition.data.board} />
          </div>
          
          <div class="mt-6 space-y-5">
            <div>
              <h3 class="text-xl font-bold text-slate-900 dark:text-white mb-3">Usage Conditions</h3>
              <p class="text-sm text-slate-600 dark:text-slate-300 leading-relaxed">
                {composition.data.description}
              </p>
            </div>
            <div>
              <h3 class="text-xl font-bold text-slate-900 dark:text-white mb-3">Gameplay Mode</h3>
              <p class="text-sm text-slate-600 dark:text-slate-300 leading-relaxed">
                {composition.data.gameplayMode}
              </p>
            </div>
            <div>
              <h3 class="text-xl font-bold text-slate-900 dark:text-white mb-3">Detailed Guide</h3>
              <div class="prose prose-slate dark:prose-invert max-w-none text-sm text-slate-600 dark:text-slate-300">
                <Content />
              </div>
            </div>
          </div>
        </div>

        <div class="space-y-6">
          <!-- Core Items -->
          <div>
            <h2 class="text-2xl font-bold text-slate-900 dark:text-white mb-4">Core Items</h2>
            <div class="space-y-3">
              {composition.data.coreItems.map((item: any) => (
                <div class="p-4 rounded-lg bg-slate-100 dark:bg-slate-800/50 border border-slate-200 dark:border-slate-800">
                  <ItemWithImage itemName={item.name}  description={item.description} size="medium"/>
                </div>
              ))}
            </div>
          </div>

          <!-- Recommended Augments -->
          <div>
            <h2 class="text-2xl font-bold text-slate-900 dark:text-white mb-4">Recommended Augments</h2>
            <div class="space-y-3">
              {composition.data.augments.map((augment: any) => (
                <a class="flex items-center gap-4 p-3 rounded-lg bg-slate-100 dark:bg-slate-800/50 hover:bg-slate-200 dark:hover:bg-slate-800 border border-slate-200 dark:border-slate-800 transition-colors" href="#">
                  <div class="flex items-center justify-center size-10 rounded-lg bg-primary/20 text-primary">
                    <span class="material-symbols-outlined">{augment.icon}</span>
                  </div>
                  <div>
                    <p class="font-semibold text-slate-800 dark:text-slate-200">{augment.name}</p>
                    <p class="text-sm text-slate-500 dark:text-slate-400">{augment.description}</p>
                  </div>
                </a>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>