---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';

// Importar todas las imágenes de campeones
import AatroxImg from '../../assets/Champions/Aatrox.png';
import AhriImg from '../../assets/Champions/Ahri.png';
import AkaliImg from '../../assets/Champions/Akali.png';
import AsheImg from '../../assets/Champions/Ashe.png';
import BraumImg from '../../assets/Champions/Braum.png';
import CaitlynImg from '../../assets/Champions/Caitlyn.png';
import DariusImg from '../../assets/Champions/Darius.png';
import DrMundoImg from '../../assets/Champions/Dr Mundo.png';
import EzrealImg from '../../assets/Champions/Ezreal.png';
import GangplankImg from '../../assets/Champions/Gangplank.png';
import GarenImg from '../../assets/Champions/Garen.png';
import GnarImg from '../../assets/Champions/Gnar.png';
import GwenImg from '../../assets/Champions/Gwen.png';
import JannaImg from '../../assets/Champions/Janna.png';
import JarvanIVImg from '../../assets/Champions/JarvanIV.png';
import JayceImg from '../../assets/Champions/Jayce.png';
import JhinImg from '../../assets/Champions/Jhin.png';
import JinxImg from '../../assets/Champions/Jinx.png';
import KaiSaImg from '../../assets/Champions/KaiSa.png';
import KalistaImg from '../../assets/Champions/Kalista.png';
import KarmaImg from '../../assets/Champions/Karma.png';
import KatarinaImg from '../../assets/Champions/Katarina.png';
import KayleImg from '../../assets/Champions/Kayle.png';
import KennenImg from '../../assets/Champions/Kennen.png';
import KobukoImg from '../../assets/Champions/Kobuko.png';
import KogMawImg from '../../assets/Champions/KogMaw.png';
import KSanteImg from '../../assets/Champions/KSante.png';
import LeeSinImg from '../../assets/Champions/Lee Sin.png';
import LeonaImg from '../../assets/Champions/Leona.png';
import LucianImg from '../../assets/Champions/Lucian.png';
import LuluImg from '../../assets/Champions/Lulu.png';
import LuxImg from '../../assets/Champions/Lux.png';
import MalphiteImg from '../../assets/Champions/Malphite.png';
import MalzaharImg from '../../assets/Champions/Malzahar.png';
import NaafiriImg from '../../assets/Champions/Naafiri.png';
import NeekoImg from '../../assets/Champions/Neeko.png';
import PoppyImg from '../../assets/Champions/Poppy.png';
import RakanImg from '../../assets/Champions/Rakan.png';
import RammusImg from '../../assets/Champions/Rammus.png';
import RellImg from '../../assets/Champions/Rell.png';
import RyzeImg from '../../assets/Champions/Ryze.png';
import SamiraImg from '../../assets/Champions/Samira.png';
import SennaImg from '../../assets/Champions/Senna.png';
import SeraphineImg from '../../assets/Champions/Seraphine.png';
import SettImg from '../../assets/Champions/Sett.png';
import ShenImg from '../../assets/Champions/Shen.png';
import SivirImg from '../../assets/Champions/Sivir.png';
import SmolderImg from '../../assets/Champions/Smolder.png';
import SwainImg from '../../assets/Champions/Swain.png';
import SyndraImg from '../../assets/Champions/Syndra.png';
import TheMightyMechImg from '../../assets/Champions/The Mighty Mech.png';
import TwistedFateImg from '../../assets/Champions/Twisted Fate.png';
import UdyrImg from '../../assets/Champions/Udyr.png';
import VarusImg from '../../assets/Champions/Varus.png';
import ViImg from '../../assets/Champions/Vi.png';
import ViegoImg from '../../assets/Champions/Viego.png';
import VolibearImg from '../../assets/Champions/Volibear.png';
import XayahImg from '../../assets/Champions/Xayah.png';
import XinZhaoImg from '../../assets/Champions/Xin Zhao.png';
import YasuoImg from '../../assets/Champions/Yasuo.png';
import YoneImg from '../../assets/Champions/Yone.png';
import YuumiImg from '../../assets/Champions/Yuumi.png';
import ZacImg from '../../assets/Champions/Zac.png';
import ZiggsImg from '../../assets/Champions/Ziggs.png';
import ZyraImg from '../../assets/Champions/Zyra.png';

// Mapa de campeones a imágenes
const championImages = {
  'Aatrox': AatroxImg,
  'Ahri': AhriImg,
  'Akali': AkaliImg,
  'Ashe': AsheImg,
  'Braum': BraumImg,
  'Caitlyn': CaitlynImg,
  'Darius': DariusImg,
  'Dr Mundo': DrMundoImg,
  'Ezreal': EzrealImg,
  'Gangplank': GangplankImg,
  'Garen': GarenImg,
  'Gnar': GnarImg,
  'Gwen': GwenImg,
  'Janna': JannaImg,
  'JarvanIV': JarvanIVImg,
  'Jayce': JayceImg,
  'Jhin': JhinImg,
  'Jinx': JinxImg,
  'KaiSa': KaiSaImg,
  'Kalista': KalistaImg,
  'Karma': KarmaImg,
  'Katarina': KatarinaImg,
  'Kayle': KayleImg,
  'Kennen': KennenImg,
  'Kobuko': KobukoImg,
  'KogMaw': KogMawImg,
  'KSante': KSanteImg,
  'Lee Sin': LeeSinImg,
  'Leona': LeonaImg,
  'Lucian': LucianImg,
  'Lulu': LuluImg,
  'Lux': LuxImg,
  'Malphite': MalphiteImg,
  'Malzahar': MalzaharImg,
  'Naafiri': NaafiriImg,
  'Neeko': NeekoImg,
  'Poppy': PoppyImg,
  'Rakan': RakanImg,
  'Rammus': RammusImg,
  'Rell': RellImg,
  'Ryze': RyzeImg,
  'Samira': SamiraImg,
  'Senna': SennaImg,
  'Seraphine': SeraphineImg,
  'Sett': SettImg,
  'Shen': ShenImg,
  'Sivir': SivirImg,
  'Smolder': SmolderImg,
  'Swain': SwainImg,
  'Syndra': SyndraImg,
  'The Mighty Mech': TheMightyMechImg,
  'Twisted Fate': TwistedFateImg,
  'Udyr': UdyrImg,
  'Varus': VarusImg,
  'Vi': ViImg,
  'Viego': ViegoImg,
  'Volibear': VolibearImg,
  'Xayah': XayahImg,
  'Xin Zhao': XinZhaoImg,
  'Yasuo': YasuoImg,
  'Yone': YoneImg,
  'Yuumi': YuumiImg,
  'Zac': ZacImg,
  'Ziggs': ZiggsImg,
  'Zyra': ZyraImg,
};

// Obtener todas las composiciones
const compositions = await getCollection('compositions');

// Función para obtener el campeón core (el que tiene 3 estrellas o más items)
function getCoreChampion(boardData: any) {
  const champions = boardData.champions;
  
  // Buscar el campeón con más estrellas
  const maxStars = Math.max(...champions.map((c: any) => c.stars || 1));
  const coreByStars = champions.find((c: any) => c.stars === maxStars);
  
  // Si hay empate en estrellas, buscar el que tiene más items
  if (champions.filter((c: any) => c.stars === maxStars).length > 1) {
    const coreByItems = champions.reduce((prev: any, current: any) => {
      const prevItems = prev.items?.length || 0;
      const currentItems = current.items?.length || 0;
      return currentItems > prevItems ? current : prev;
    });
    return coreByItems;
  }
  
  return coreByStars;
}

// Agrupar composiciones por tier
const tierGroups = {
  'S Tier': compositions.filter(comp => comp.data.tier === 'S Tier'),
  'A Tier': compositions.filter(comp => comp.data.tier === 'A Tier'),
  'B Tier': compositions.filter(comp => comp.data.tier === 'B Tier'),
  'C Tier': compositions.filter(comp => comp.data.tier === 'C Tier'),
};

// Función para obtener la clase CSS del tier
function getTierClass(tier: string) {
  switch(tier) {
    case 'S Tier': return 'tier-s';
    case 'A Tier': return 'tier-a';
    case 'B Tier': return 'tier-b';
    case 'C Tier': return 'tier-c';
    default: return 'tier-default';
  }
}

// Función para obtener la imagen del campeón
function getChampionImage(championName: string) {
  return championImages[championName as keyof typeof championImages]?.src || championImages['Aatrox'].src;
}
---

<Layout title="Composiciones TFT - AKACompos">
  <div class="container mx-auto px-4 sm:px-6 lg:px-8 py-8 md:py-16">
    <!-- Header -->
    <div class="text-center mb-16 animate-slide-up">
      <div class="relative inline-block mb-6">
        <h1 class="text-5xl md:text-7xl font-black text-white mb-4 relative z-10">
          Composiciones TFT
        </h1>
        <div class="absolute inset-0 bg-gradient-primary opacity-20 blur-2xl animate-glow"></div>
      </div>
      <p class="text-xl text-slate-300 max-w-3xl mx-auto leading-relaxed">
        Descubre las mejores composiciones para dominar el rift. Organizadas por tier y actualizadas constantemente.
      </p>
    </div>

    <!-- Stats Overview -->
    <div class="flex justify-center mb-12">
      <div class="bg-gradient-card backdrop-blur-sm border border-purple-500/20 rounded-2xl p-6 shadow-card">
        <div class="flex items-center gap-8">
          <div class="text-center">
            <div class="text-3xl font-bold text-primary-light">{compositions.length}</div>
            <div class="text-sm text-slate-400">Total Compos</div>
          </div>
          <div class="w-px h-12 bg-purple-500/30"></div>
          <div class="text-center">
            <div class="text-3xl font-bold text-gold">{tierGroups['S Tier'].length}</div>
            <div class="text-sm text-slate-400">S Tier</div>
          </div>
          <div class="w-px h-12 bg-purple-500/30"></div>
          <div class="text-center">
            <div class="text-3xl font-bold text-green-400">{tierGroups['A Tier'].length}</div>
            <div class="text-sm text-slate-400">A Tier</div>
          </div>
        </div>
      </div>
    </div>

    <!-- Composiciones por Tier -->
    {Object.entries(tierGroups).map(([tierName, tierCompositions]) => 
      tierCompositions.length > 0 && (
        <section class="mb-16 animate-fade-in">
          <!-- Tier Header -->
          <div class="flex items-center gap-4 mb-8">
            <div class={`tier-badge ${getTierClass(tierName)}`}>
              <span class="tier-text">{tierName}</span>
            </div>
            <div class="flex-1 h-px bg-gradient-to-r from-purple-500/50 to-transparent"></div>
          </div>

          <!-- Grid de Composiciones -->
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 stagger-animation">
            {tierCompositions.map((composition) => {
              const coreChampion = getCoreChampion(composition.data.board);
              const championImageUrl = getChampionImage(coreChampion.name);
              
              return (
                <a 
                  href={`/compositions/${composition.id}`}
                  class="composition-card group"
                >
                  <!-- Champion Banner -->
                  <div class="relative overflow-hidden rounded-t-3xl h-48 bg-gradient-dark">
                    <img 
                      src={championImageUrl}
                      alt={coreChampion.name}
                      class="w-full h-full object-cover object-center transform group-hover:scale-110 transition-transform duration-500"
                      loading="lazy"
                    />
                    <div class="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent"></div>
                    


                    <!-- Tier Badge -->
                    <div class="absolute top-4 right-4">
                      <div class={`tier-mini-badge ${getTierClass(composition.data.tier)}`}>
                        {composition.data.tier}
                      </div>
                    </div>
                  </div>

                  <!-- Card Content -->
                  <div class="p-6 bg-gradient-card backdrop-blur-sm border-x border-b border-purple-500/20 rounded-b-3xl">
                    <!-- Title and Update -->
                    <div class="mb-4">
                      <h3 class="text-xl font-bold text-white mb-2 group-hover:text-primary-light transition-colors">
                        {composition.data.title}
                      </h3>
                      <div class="flex items-center gap-2 text-sm text-slate-400">
                        <span class="material-symbols-outlined text-xs">schedule</span>
                        {composition.data.updatedAt}
                      </div>
                    </div>

                    <!-- Description -->
                    <p class="text-slate-300 text-sm leading-relaxed mb-4 line-clamp-3">
                      {composition.data.description}
                    </p>

                    <!-- Tags -->
                    <div class="flex flex-wrap gap-2 mb-4">
                      {composition.data.tags.slice(0, 3).map((tag: string) => (
                        <span class="tag-badge">
                          {tag}
                        </span>
                      ))}
                      {composition.data.tags.length > 3 && (
                        <span class="tag-badge-more">
                          +{composition.data.tags.length - 3} más
                        </span>
                      )}
                    </div>

                    <!-- Author -->
                    <div class="flex items-center justify-between">
                      <div class="flex items-center gap-2 text-sm text-slate-400">
                        <span class="material-symbols-outlined text-xs">person</span>
                        {composition.data.author}
                      </div>
                      <div class="flex items-center gap-1 text-primary-light">
                        <span class="text-xs">Ver composición</span>
                        <span class="material-symbols-outlined text-sm">arrow_forward</span>
                      </div>
                    </div>
                  </div>
                </a>
              );
            })}
          </div>
        </section>
      )
    )}

    <!-- Empty State -->
    {compositions.length === 0 && (
      <div class="text-center py-16">
        <div class="w-24 h-24 bg-gradient-primary rounded-full flex items-center justify-center mx-auto mb-6">
          <span class="material-symbols-outlined text-white text-4xl">search_off</span>
        </div>
        <h3 class="text-2xl font-bold text-white mb-4">No hay composiciones disponibles</h3>
        <p class="text-slate-400 max-w-md mx-auto">
          Parece que aún no tenemos composiciones para mostrar. ¡Vuelve pronto para ver las últimas estrategias!
        </p>
      </div>
    )}
  </div>
</Layout>

<style>
  /* Tier Badges */
  .tier-badge {
    padding: 1rem 1.5rem;
    border-radius: 9999px;
    font-weight: bold;
    font-size: 1.125rem;
    box-shadow: var(--shadow-glow);
  }

  .tier-s {
    background: linear-gradient(to right, #ef4444, #dc2626);
    color: white;
  }

  .tier-a {
    background: linear-gradient(to right, #f97316, #ea580c);
    color: white;
  }

  .tier-b {
    background: linear-gradient(to right, #3b82f6, #2563eb);
    color: white;
  }

  .tier-c {
    background: linear-gradient(to right, #22c55e, #16a34a);
    color: white;
  }

  .tier-default {
    background: linear-gradient(to right, #6b7280, #4b5563);
    color: white;
  }

  /* Mini Tier Badges */
  .tier-mini-badge {
    padding: 0.25rem 0.5rem;
    border-radius: 9999px;
    font-size: 0.75rem;
    font-weight: bold;
  }

  .tier-mini-badge.tier-s {
    background-color: rgba(239, 68, 68, 0.9);
    color: white;
  }

  .tier-mini-badge.tier-a {
    background-color: rgba(249, 115, 22, 0.9);
    color: white;
  }

  .tier-mini-badge.tier-b {
    background-color: rgba(59, 130, 246, 0.9);
    color: white;
  }

  .tier-mini-badge.tier-c {
    background-color: rgba(34, 197, 94, 0.9);
    color: white;
  }

  /* Composition Cards */
  .composition-card {
    display: block;
    background-color: transparent;
    transition: all 0.3s ease;
  }

  /* Tag Badges */
  .tag-badge {
    display: inline-block;
    background-color: rgba(126, 34, 206, 0.2);
    color: var(--color-primary-light);
    border: 1px solid rgba(126, 34, 206, 0.3);
    border-radius: 9999px;
    padding: 0.25rem 0.75rem;
    font-size: 0.75rem;
    font-weight: 500;
    transition: all 0.2s ease;
  }

  .tag-badge:hover {
    background-color: rgba(126, 34, 206, 0.3);
    border-color: rgba(126, 34, 206, 0.5);
  }

  .tag-badge-more {
    display: inline-block;
    background-color: rgba(51, 65, 85, 0.5);
    color: #94a3b8;
    border: 1px solid rgba(71, 85, 105, 0.5);
    border-radius: 9999px;
    padding: 0.25rem 0.75rem;
    font-size: 0.75rem;
    font-weight: 500;
  }

  /* Line clamp utility */
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Enhanced hover effects */
  .composition-card:hover .tag-badge {
    transform: translateY(-1px);
  }

  .composition-card:hover img {
    filter: brightness(1.1);
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .tier-badge {
      padding: 0.5rem 1rem;
      font-size: 1rem;
    }
    
    .composition-card {
      margin-bottom: 1rem;
    }
  }
</style>
